//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputsActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputsActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputsActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputsActions"",
    ""maps"": [
        {
            ""name"": ""Bike"",
            ""id"": ""1ab79694-f008-424f-ad7a-bd60c57a06ef"",
            ""actions"": [
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""f5c5f82b-8ebd-4bd8-ba1d-cb23abf0c132"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""cbe63634-48c4-4d62-9ac4-bc21a98eaf38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""01262153-bd5d-4a5e-a926-2d5aaf7e6500"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""07494f45-d2ce-426d-b0cc-3acf8a37be68"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""04308494-84bc-468e-b571-a8ce288eee4c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""af63ed39-d726-4eb1-b379-5bc0ee23b165"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""0e28ea13-a9d9-4c45-9dd4-1413a317dbe1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6c79d6bb-4e1b-4e81-a2c4-0f6278ce392e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""53700078-7f3a-4d1a-aae6-dbf8dd54471a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Bike
        m_Bike = asset.FindActionMap("Bike", throwIfNotFound: true);
        m_Bike_Sprint = m_Bike.FindAction("Sprint", throwIfNotFound: true);
        m_Bike_Rotate = m_Bike.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bike
    private readonly InputActionMap m_Bike;
    private IBikeActions m_BikeActionsCallbackInterface;
    private readonly InputAction m_Bike_Sprint;
    private readonly InputAction m_Bike_Rotate;
    public struct BikeActions
    {
        private @PlayerInputsActions m_Wrapper;
        public BikeActions(@PlayerInputsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Sprint => m_Wrapper.m_Bike_Sprint;
        public InputAction @Rotate => m_Wrapper.m_Bike_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Bike; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BikeActions set) { return set.Get(); }
        public void SetCallbacks(IBikeActions instance)
        {
            if (m_Wrapper.m_BikeActionsCallbackInterface != null)
            {
                @Sprint.started -= m_Wrapper.m_BikeActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_BikeActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_BikeActionsCallbackInterface.OnSprint;
                @Rotate.started -= m_Wrapper.m_BikeActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_BikeActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_BikeActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_BikeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public BikeActions @Bike => new BikeActions(this);
    public interface IBikeActions
    {
        void OnSprint(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
}
